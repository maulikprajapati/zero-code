apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-alloy
  namespace: argocd
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 0.9.2
    chart: alloy
    helm:
      releaseName: alloy
      values: |
        serviceAccount:
          create: true
        rbac:
          create: true
        alloy:
          extraPorts:
            - name: otlp-grpc
              port: 4317
              targetPort: 4317
              protocol: TCP
            - name: otlp-http
              port: 4318
              targetPort: 4318
              protocol: TCP
          configMap:
            create: true
            content: |
              // OTLP receiver for traces and metrics
              otelcol.receiver.otlp "default" {
                grpc {
                  endpoint = "0.0.0.0:4317"
                }
                http {
                  endpoint = "0.0.0.0:4318"
                }
                output {
                  traces = [otelcol.processor.filter.health_filter.input]
                  metrics = [otelcol.exporter.prometheus.metrics.input]
                }
              }

              // Export metrics to Prometheus
              otelcol.exporter.prometheus "metrics" {
                forward_to = [prometheus.remote_write.metrics.receiver]
              }

              // Prometheus remote write for metrics
              prometheus.remote_write "metrics" {
                endpoint {
                  url = "http://prometheus.monitoring:9090/api/v1/write"
                }
              }

              // Filter health endpoints from traces
              otelcol.processor.filter "health_filter" {
                traces {
                  span = [
                    "IsMatch(attributes[\"http.target\"], \".*\\\\/health$\")",
                    "IsMatch(attributes[\"http.route\"], \".*\\\\/health$\")",
                    "IsMatch(attributes[\"url.path\"], \".*\\\\/health$\")",
                    "IsMatch(name, \".*(GET|POST).*\\\\/health.*\")",
                  ]
                }
                output {
                  traces = [otelcol.exporter.otlp.tempo.input]
                }
              }

              // Export traces to Tempo
              otelcol.exporter.otlp "tempo" {
                client {
                  endpoint = "tempo-distributed-distributor.monitoring.svc.cluster.local:4317"
                  tls {
                    insecure = true
                  }
                }
              }

              discovery.kubernetes "pods" {
              role = "pod"
              }

              discovery.kubernetes "nodes" {
              role = "node"
              }

              discovery.kubernetes "services" {
              role = "service"
              }

              discovery.kubernetes "endpoints" {
              role = "endpoints"
              }

              discovery.kubernetes "endpointslices" {
              role = "endpointslice"
              }

              discovery.kubernetes "ingresses" {
              role = "ingress"
              }

              // Send logs to Loki
              loki.write "loki" {
                endpoint {
                  url = "http://loki-distributed-gateway.monitoring:80/loki/api/v1/push"
                }
              }

              // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
              // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
              discovery.kubernetes "pod" {
                role = "pod"
              }
              // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
              // If no rules are defined, then the input targets are exported as-is.
              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets

                // Label creation - "namespace" field from "__meta_kubernetes_namespace"
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }

                // Label creation - "pod" field from "__meta_kubernetes_pod_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "container"
                }

                // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }

                // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                  separator = "/"
                  replacement = "$1"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "__path__"
                  separator = "/"
                  replacement = "/var/log/pods/*$1/*.log"
                }

                // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  action = "replace"
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
              }

              // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }

              // loki.process receives log entries from other Loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "pod_logs" {
                stage.static_labels {
                    values = {
                      cluster = "dev",
                    }
                }

                forward_to = [loki.write.loki.receiver]
              }

        service:
          enabled: true
          type: ClusterIP
        controller:
          type: deployment
          replicas: 1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true